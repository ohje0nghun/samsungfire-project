apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.jenkins.agentName }}
  namespace: jenkins
  labels:
    app: jenkins-agent
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: jenkins-agent
  template:
    metadata:
      labels:
        app: jenkins-agent
    spec:
      containers:
        - name: jnlp
          image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh", "-c"]
          args:
            - |
              curl -sO {{ .Values.jenkins.url }}/jnlpJars/agent.jar &&
              java -jar agent.jar \
                -url {{ .Values.jenkins.url }}/ \
                -secret "$(JNLP_SECRET)" \
                -name "{{ .Values.jenkins.agentName }}" \
                -webSocket \
                -workDir "/home/jenkins/agent"
          env:
            - name: JNLP_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.jenkins.secretName }}
                  key: {{ .Values.jenkins.secretKey }}
          volumeMounts:
            - name: workdir
              mountPath: /home/jenkins/agent
      volumes:
        - name: workdir
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingClaim }}
      imagePullSecrets:
        {{- range .Values.image.pullSecrets }}
        - name: {{ .name }}
        {{- end }}
      nodeSelector:
        topology.kubernetes.io/zone: "AZ2"
      tolerations:
        - key: "jenkins-agent"
          operator: "Exists"


---
replicaCount: 1

# PVC 이름
persistence:
  enabled: true
  existingClaim: jenkins-agent-pvc

# 이미지 정보
image:
  repository: sfmiscr-ryjqdraw.scr.kr-west.scp-in.com/jenkins-agent-dymc
  tag: lts2

# Jenkins 관련 설정
jenkins:
  url: http://jenkins-lts:8080
  agentName: jenkins-lts-jenkins-agent-static
  secretName: jenkins-agent-secret
  secretKey: JNLP_SECRET
---

